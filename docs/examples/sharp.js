const stream = require('stream');
const { createWriteStream } = require('fs');
const path = require('path');
const { promisify } = require('util');
const sharp = require('sharp');
const bitgener = require('../../lib');

const pipeline = promisify(stream.pipeline);

/**
 * Generic function to convert the svg generated from Bitgener
 * into the specified format and get the specified output.
 *
 * Please note that no type/value checks are made in this function.
 *
 * @param  {Buffer} buffer    The buffer generated by Bitgener.
 * @param  {Number} density   The density needed to resize the image with no
 *                            image quality loss.
 * @param  {String} format    Format could be one of png, jpeg,
 *                            webp, tiff, raw supported by Sharp.
 * @param  {String} method    Method could be one of toFile, toBuffer,
 *                            or a Readable Stream returned by default by Sharp.
 * @param  {String} filePath  Path to write the image data to. If set, method is not required.
 * @return {Promise}          A Readable Stream by default, a Buffer,
 *                            a Sharp info object depending on the method.
 */
const convert = async function convert({
  buffer,
  density,
  format,
  method,
  filePath,
} = {}) {
  // sharp it!
  const sharped = sharp(buffer, { density });
  let ret;

  if (method === 'toFile' || filePath !== undefined) {
    ret = await sharped.toFile(filePath);
    // object returned by sharp: https://sharp.pixelplumbing.com/en/stable/api-output/#tofile
  } else if (method === 'toBuffer') {
    ret = sharped.toFormat(format).toBuffer();
  } else {
    // return a sharp/streamable object
    ret = sharped[format]();
  }

  return ret;
};

// then use it in an async function
(async () => {
  try {
    const wstream = createWriteStream(path.join(__dirname, 'sharped.png'));
    const {
      svg: buffer,
      density,
    } = await bitgener({
      data: 'Bitgener',
      type: 'datamatrix',
      output: 'buffer',
      encoding: 'utf8',
      rectangular: true,
      padding: 0,
      width: 250,
      height: 250,
      original2DSize: false,
      color: '#FFFFFF',
      opacity: 1,
      bgColor: '#F7931A',
      bgOpacity: 1,
      hri: {
        show: true,
        fontFamily: 'Courier New',
        fontSize: 15,
        marginTop: 0,
      },
    });

    const rstream = await convert({
      buffer,
      density,
      format: 'png',
    });

    // listen to rstream and wstream error events ;)

    // use pipeline to automatically clean up streams or you're exposing your code to memory leaks
    await pipeline(rstream, wstream);

    // ...
  } catch (e) {
    console.error(e.toString());
  }
})();
